﻿<nav class="navbar d-flex justify-content-between mx-3">
    <a class="navbar-brand" href="#"><img src="images/Logo6.png" alt="MPC logo" /></a>
    <div class="input-group flex-nowrap search-width">
        <input type="text" class="form-control rounded-0" placeholder="Search" aria-label="Search" aria-describedby="addon-wrapping">
        <span class="input-group-text rounded-0" id="addon-wrapping"><i class="bi bi-search"></i></span>
    </div>
    <div class="d-flex justify-content-between ">
        <div class="dropdown">
            <button class=" rounded-0 btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-person-circle"></i> Account
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#"> <i class="bi bi-key"></i>    Log in</a></li>
                <li><a class="dropdown-item" href="#"> <i class="bi bi-person-add"></i>   Sign up</a></li>
                <li><a class="dropdown-item" href="#"> <i class="bi bi-person-dash"></i>   Log out</a></li>
            </ul>
        </div>
        <div>
            <div class="position-relative">
                <button id="cart-button" type="button"
                        data-bs-toggle="modal" data-bs-target="#cart"
                        class="btn btn-outline-success rounded-0 custom-border-color">
                    <i class="bi bi-handbag"  style="color: white;"></i> Shoppingbag @*It is for shoping cart*@
                </button>
                <div class="cart-count text-gray rounded-circle position-absolute">@UICartService!.CartItems.Count</div>
            </div>
            <div></div>
        </div>
    </div>
</nav>
<CartComponent OnRemoveCartItem="OnRemoveCartItem" CartItems="UICartService.CartItems" />

@code {
    [Parameter] public UIService? UICartService { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        UICartService!.CartItems =
            await UICartService!.ReadStorage<List<CartItemDTO>>("CartItems") ?? [];
    }

    async Task OnRemoveCartItem(CartItemDTO? cartItem)
    {
        UICartService!.CartItems.Remove(cartItem);
        await UICartService!.SaveToStorage("CartItems", UICartService!.CartItems);
    }
}

